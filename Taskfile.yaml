version: 3

vars:
  root_dir:
    sh: git rev-parse --show-toplevel
  app_dir:
    "{{ .root_dir }}/app"
  k8s_dir:
    "{{ .root_dir }}/k8s"

  golang_version: 1.20.6
  app_bin_name: jb-app

  minikube_mem: 8192
  minikube_cpu: 4

  namespace_infra: infra
  namespace_service: service

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task name or use -l / --list-all to list all available tasks"
    silent: true

  common/vendor:
    desc: Run go mod vendor.
    cmds:
      - |
        cd {{ .app_dir }} && go mod tidy
        if [ -d "{{ .app_dir }}/vendor" ]; then
          echo "{{ .app_dir }}/vendor folder already exist"
        else
          go mod vendor
        fi
    silent: true
    internal: true

  app/swagger/init:
    desc: Init / ReInit Swagger
    cmds:
      - cd {{ .app_dir }} && swag init -g ./cmd/main.go
    internal: true
        
  app/local/build:
    desc: Build binary local.
    deps:
      - common/vendor
    cmds:
      - cd {{ .app_dir }} && go build -asmflags="-trimpath=OPATH" -ldflags="-w -s" -gcflags="-trimpath=OPATH" -o {{ .root_dir }}/{{ .app_bin_name }} ./cmd
      - chmod a+x {{ .root_dir }}/{{ .app_bin_name }}

  app/docker/build:
    desc: Build docker image.
    deps:
      - common/vendor
    env:
      DOCKER_IMAGE: chelyshkin/jb-service
      DOCKER_TAG:   latest
    cmds:
      - docker build --force-rm --target {{ ARCH }} -t ${DOCKER_IMAGE}:${DOCKER_TAG} --build-arg GO_VERSION={{ .golang_version }} -f {{ .root_dir }}/Dockerfile {{ .root_dir }}

  app/docker/push:
    desc: Push docker image.
    deps:
      - app/docker/build
    env:
      DOCKER_USER: '{{ .DOCKER_USER }}'
      DOCKER_PASS: '{{ .DOCKER_PASS }}'
      DOCKER_IMAGE: chelyshkin/jb-service
      DOCKER_TAG:   latest
    cmds:
      - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - docker push ${DOCKER_IMAGE}:${DOCKER_TAG}

  k8s/deploy/infra:
    desc: Deploy infrastructure tools to K8S.
    cmds:
      - |
        for file in {{ .k8s_dir }}/infra/common/*.yaml; do
          kubectl apply -f "$file"
        done
      - for: ["prometheus", "prometheus-adapter", "grafana", "elasticsearch", "kibana", "istio", "istiod"]
        cmd: |
          if helm list -q -n {{ .namespace_infra }} | grep -q {{ .ITEM }}; then
            helm upgrade {{ .ITEM }} {{ .k8s_dir }}/infra/{{ .ITEM }} -n {{ .namespace_infra }}
          else
            kubectl create namespace {{ .namespace_infra }} || true
            helm install {{ .ITEM }} {{ .k8s_dir }}/infra/{{ .ITEM }} -n {{ .namespace_infra }}
          fi
      - "kubectl apply -f {{ .k8s_dir }}/infra/istiod/common/generated.yaml"
      - "kubectl apply -f {{ .k8s_dir }}/infra/istiod/common/rate-limit.yaml"
      - "kubectl label namespace {{ .namespace_service }} istio-injection=enabled"

  k8s/deploy/service:
    desc: Deploy service to K8S.
    cmds:
      - |
        if helm list -q -n {{ .namespace_service }} | grep -q "jb-service"; then
          echo "Release exists, upgrading..."
          helm upgrade jb-service {{ .k8s_dir }}/apps/jb-service -n {{ .namespace_service }}
        else
          echo "Release doesn't exist, installing..."
          kubectl create namespace {{ .namespace_service }} || true
          helm install jb-service {{ .k8s_dir }}/service -n {{ .namespace_service }}
        fi

  minikube/up:
    desc: Run minikube with service.
    cmds:
      - minikube stop || true
      - minikube cache delete
      - minikube delete
      - minikube config set memory {{ .minikube_mem }}
      - minikube config set cpus {{ .minikube_cpu }}
      - minikube start --driver=docker

      - kubectl create namespace {{ .namespace_infra }}
      - kubectl create namespace {{ .namespace_service }}

      - task: k8s/deploy/infra
      - task: k8s/deploy/service

  minikube/infra/prometheus-lookup:
    desc: Minikube tunnel to prometheus.
    cmds:
      - minikube service prometheus-server -n {{ .namespace_infra }}

  minikube/infra/grafana-lookup:
    desc: Minikube tunnel to grafana.
    cmds:
      - |
        pass=$(kubectl get secret -n {{ .namespace_infra }} grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
        echo "username: admin, password: $pass"
      - kubectl port-forward svc/grafana 3000:80 -n {{ .namespace_infra }}

  minikube/infra/kibana-lookup:
    desc: Minikube tunnel to kibana.
    cmds:
      - kubectl port-forward service/kibana-kibana 5601:5601 -n {{ .namespace_infra }}

  minikube/service/app-lookup:
    desc: Minikube tunnel to application.
    cmds:
      - minikube service jb-service -n {{ .namespace_service }}
